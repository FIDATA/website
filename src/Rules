#!/usr/bin/env ruby
# coding: utf-8

# Rules file for nanoc
# Copyright © 2014, 2017  Basil Peace

# This file is part of code for generation of FIDATA Website.

# This work is licensed under the Creative Commons
# Attribution-ShareAlike 3.0 Unported License. A copy of this license is
# located in LICENSE.code.txt. If you haven't received that file,
# visit http://creativecommons.org/licenses/by-sa/3.0/ or send a letter
# to Creative Commons, 444 Castro Street, Suite 900, Mountain View,
# California, 94041, USA.

# A few helpful tips about the Rules file:
#
# * The string given to #compile and #route are matching patterns for
#   identifiers--not for paths. Therefore, you can’t match on extension.
#
# * The order of rules is important: for each item, only the first matching
#   rule is applied.
#
# * Item identifiers start and end with a slash (e.g. “/about/” for the file
#   “content/about.html”). To select all children, grandchildren, … of an
#   item, use the pattern “/about/*/”; “/about/*” will also select the parent,
#   because “*” matches zero or more characters.

preprocess do
  @items.each do |item|
    item[:comments] = true if item[:comments].nil?
    item[:disqus_identifier] ||= item.identifier.chop
    item[:layout] ||= 'default.html'
  end
  
  preprocess_langs
  @config[:website_subtitle] = @config[:website_subtitle].stringify_keys_recursively

  generate_menus

  generate_GitHub_files '/assets/'
end

compile '/assets/*' do
end

# TODO
compile '/images/*/' do
  filter :image_compressor if item.binary?
end
compile '/*/images/*/' do
  filter :image_compressor if item.binary?
end

compile '*' do
  if ['css', 'scss'].include?(item[:extension])
    filter :erb
    filter :sass, :syntax => :scss, :style => :compressed
    filter :relativize_paths, :type => :css
  elsif ['js', 'htc'].include?(item[:extension])
    filter :uglify_js
  elsif item[:extension] == 'md'
    filter :erb
    filter :kramdown, :parse_block_html => true
    # TODO filter :add_sections
    layout item[:layout]
    filter :relativize_paths, :type => :html
    filter :html_compress
  elsif item[:extension] == 'menu'
    nil
  elsif item.binary?
    # don’t filter binary items
  else
    filter :erb
    # TODO filter :add_sections
    layout item[:layout]
    filter :relativize_paths, :type => :html
    filter :html_compress
  end
end

# route '*/' do
#   "#{item.identifier}index.html"
# end

route '/assets/*' do
  (item.identifier.match(%r{^(?:/.*?)(/.*)/$}) || [])[1]
end

route '*' do
  if ['css', 'scss'].include?(item[:extension])
    # Write item with identifier /foo/ to /foo.css
    "#{item.identifier.chop}.css"
  elsif ['js', 'htc'].include?(item[:extension]) or item.binary?
    # Write item with identifier /foo/ to /foo.ext
    "#{item.identifier.chop}.#{item[:extension]}"
  elsif item[:extension] == 'menu'
  elsif item.children.length > 0
    "#{item.identifier}index.html"
  else
    # Write item with identifier /foo/ to /foo.html
    "#{item.identifier.chop}.html"
  end
end

layout '*', :erb
